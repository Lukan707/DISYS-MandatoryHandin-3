// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecieveMessage_RecieveMessage_FullMethodName = "/ChitChatty.RecieveMessage/RecieveMessage"
)

// RecieveMessageClient is the client API for RecieveMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecieveMessageClient interface {
	RecieveMessage(ctx context.Context, in *ClientSendMessage, opts ...grpc.CallOption) (*Undefined, error)
}

type recieveMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewRecieveMessageClient(cc grpc.ClientConnInterface) RecieveMessageClient {
	return &recieveMessageClient{cc}
}

func (c *recieveMessageClient) RecieveMessage(ctx context.Context, in *ClientSendMessage, opts ...grpc.CallOption) (*Undefined, error) {
	out := new(Undefined)
	err := c.cc.Invoke(ctx, RecieveMessage_RecieveMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecieveMessageServer is the server API for RecieveMessage service.
// All implementations must embed UnimplementedRecieveMessageServer
// for forward compatibility
type RecieveMessageServer interface {
	RecieveMessage(context.Context, *ClientSendMessage) (*Undefined, error)
	mustEmbedUnimplementedRecieveMessageServer()
}

// UnimplementedRecieveMessageServer must be embedded to have forward compatible implementations.
type UnimplementedRecieveMessageServer struct {
}

func (UnimplementedRecieveMessageServer) RecieveMessage(context.Context, *ClientSendMessage) (*Undefined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecieveMessage not implemented")
}
func (UnimplementedRecieveMessageServer) mustEmbedUnimplementedRecieveMessageServer() {}

// UnsafeRecieveMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecieveMessageServer will
// result in compilation errors.
type UnsafeRecieveMessageServer interface {
	mustEmbedUnimplementedRecieveMessageServer()
}

func RegisterRecieveMessageServer(s grpc.ServiceRegistrar, srv RecieveMessageServer) {
	s.RegisterService(&RecieveMessage_ServiceDesc, srv)
}

func _RecieveMessage_RecieveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecieveMessageServer).RecieveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecieveMessage_RecieveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecieveMessageServer).RecieveMessage(ctx, req.(*ClientSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RecieveMessage_ServiceDesc is the grpc.ServiceDesc for RecieveMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecieveMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChitChatty.RecieveMessage",
	HandlerType: (*RecieveMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecieveMessage",
			Handler:    _RecieveMessage_RecieveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}

const (
	BroadCastMessage_BroadCastMessage_FullMethodName = "/ChitChatty.BroadCastMessage/BroadCastMessage"
)

// BroadCastMessageClient is the client API for BroadCastMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadCastMessageClient interface {
	BroadCastMessage(ctx context.Context, in *Undefined, opts ...grpc.CallOption) (*ServerBroadcastMessage, error)
}

type broadCastMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadCastMessageClient(cc grpc.ClientConnInterface) BroadCastMessageClient {
	return &broadCastMessageClient{cc}
}

func (c *broadCastMessageClient) BroadCastMessage(ctx context.Context, in *Undefined, opts ...grpc.CallOption) (*ServerBroadcastMessage, error) {
	out := new(ServerBroadcastMessage)
	err := c.cc.Invoke(ctx, BroadCastMessage_BroadCastMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadCastMessageServer is the server API for BroadCastMessage service.
// All implementations must embed UnimplementedBroadCastMessageServer
// for forward compatibility
type BroadCastMessageServer interface {
	BroadCastMessage(context.Context, *Undefined) (*ServerBroadcastMessage, error)
	mustEmbedUnimplementedBroadCastMessageServer()
}

// UnimplementedBroadCastMessageServer must be embedded to have forward compatible implementations.
type UnimplementedBroadCastMessageServer struct {
}

func (UnimplementedBroadCastMessageServer) BroadCastMessage(context.Context, *Undefined) (*ServerBroadcastMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCastMessage not implemented")
}
func (UnimplementedBroadCastMessageServer) mustEmbedUnimplementedBroadCastMessageServer() {}

// UnsafeBroadCastMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadCastMessageServer will
// result in compilation errors.
type UnsafeBroadCastMessageServer interface {
	mustEmbedUnimplementedBroadCastMessageServer()
}

func RegisterBroadCastMessageServer(s grpc.ServiceRegistrar, srv BroadCastMessageServer) {
	s.RegisterService(&BroadCastMessage_ServiceDesc, srv)
}

func _BroadCastMessage_BroadCastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Undefined)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadCastMessageServer).BroadCastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadCastMessage_BroadCastMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadCastMessageServer).BroadCastMessage(ctx, req.(*Undefined))
	}
	return interceptor(ctx, in, info, handler)
}

// BroadCastMessage_ServiceDesc is the grpc.ServiceDesc for BroadCastMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadCastMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChitChatty.BroadCastMessage",
	HandlerType: (*BroadCastMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCastMessage",
			Handler:    _BroadCastMessage_BroadCastMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
